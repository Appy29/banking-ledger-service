name: Banking Ledger Service CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  # Code quality and security checks
  lint-and-security:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Generate mocks
        run: |
          go install go.uber.org/mock/mockgen@latest
          go generate ./...

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./services/... ./handlers/... ./utils/... ./models/...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests

  # Integration tests with real services
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: banking_ledger_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mongodb:
        image: mongo:7-jammy
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: admin
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Install MongoDB tools
        run: |
          # Install MongoDB Shell
          wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Wait for services to be ready
        run: |
          # Wait for PostgreSQL
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

          # Wait for MongoDB with proper connection string
          until mongosh "mongodb://admin:admin@localhost:27017/admin?authSource=admin" --eval "db.adminCommand('ping')" --quiet; do
            echo "Waiting for MongoDB..."
            sleep 2
          done

          # Alternative MongoDB check using netcat if mongosh fails
          if ! command -v mongosh &> /dev/null; then
            echo "mongosh not found, using netcat for MongoDB check"
            until nc -z localhost 27017; do
              echo "Waiting for MongoDB..."
              sleep 2
            done
          fi

          # Wait for RabbitMQ Management API
          until curl -f http://localhost:15672/api/overview -u admin:admin --connect-timeout 5 --max-time 10; do
            echo "Waiting for RabbitMQ..."
            sleep 5
          done

      - name: Verify service connectivity
        run: |
          echo "=== Service Connectivity Check ==="
          
          # Test PostgreSQL
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL is ready"
          else
            echo "❌ PostgreSQL connection failed"
            exit 1
          fi
          
          # Test MongoDB
          if mongosh "mongodb://admin:admin@localhost:27017/admin?authSource=admin" --eval "print('MongoDB connection successful')" --quiet; then
            echo "✅ MongoDB is ready"
          else
            echo "❌ MongoDB connection failed"
            # Try alternative check
            if nc -z localhost 27017; then
              echo "⚠️  MongoDB port is open but mongosh failed"
            else
              exit 1
            fi
          fi
          
          # Test RabbitMQ
          if curl -f http://localhost:15672/api/overview -u admin:admin --connect-timeout 5 --max-time 10; then
            echo "✅ RabbitMQ is ready"
          else
            echo "❌ RabbitMQ connection failed"
            exit 1
          fi

      - name: Run integration tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: banking_ledger_test
          MONGO_URI: mongodb://admin:admin@localhost:27017
          MONGO_DB: banking_test
          RABBITMQ_URL: amqp://admin:admin@localhost:5672/
        run: |
          go test -v -tags=integration -timeout=300s ./integration_test.go ./queue_integration_test.go

  # Build and test Docker images
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: banking-ledger-service:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker image was built
        run: |
          echo "Verifying Docker image was built successfully..."
          docker images | grep banking-ledger-service || {
            echo "❌ Docker image not found. Available images:"
            docker images
            exit 1
          }
          echo "✅ Docker image built successfully"
          docker inspect banking-ledger-service:test

      - name: Run Docker security scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'banking-ledger-service:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Display Trivy results summary
        if: always()
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "✅ Trivy scan completed successfully"
            # Show a summary of findings
            if command -v jq &> /dev/null; then
              echo "Security scan summary:"
              jq -r '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo "Results processed"
            fi
          else
            echo "⚠️ Trivy scan results not found"
          fi

  # End-to-end system tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          # Start all services
          docker-compose up -d
          
          # Wait for services to be healthy with timeout
          echo "Waiting for services to be healthy..."
          timeout 300 bash -c '
            while true; do
              if docker-compose ps | grep -q "healthy.*healthy.*healthy"; then
                echo "All services are healthy"
                break
              fi
              echo "Services not ready yet, checking again in 10 seconds..."
              docker-compose ps
              sleep 10
            done
          ' || {
            echo "Services failed to become healthy within timeout"
            echo "=== Service Status ==="
            docker-compose ps
            echo "=== Service Logs ==="
            docker-compose logs
            exit 1
          }

      - name: Run health checks
        run: |
          # Wait a bit more for API Gateway to be ready
          sleep 30
          
          # Test health endpoints with retries
          echo "Testing health endpoints..."
          for i in {1..5}; do
            if curl -f http://localhost/health --connect-timeout 10 --max-time 30; then
              echo "✅ Health endpoint is responding"
              break
            else
              echo "⚠️  Health endpoint not ready, attempt $i/5"
              if [ $i -eq 5 ]; then
                echo "❌ Health endpoint failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done
          
          # Test readiness endpoint
          curl -f http://localhost/ready --connect-timeout 10 --max-time 30 || exit 1
          
          # Test processing mode endpoint
          curl -f http://localhost/api/v1/processing-mode --connect-timeout 10 --max-time 30 || exit 1

      - name: Test API functionality
        run: |
          # Test account creation
          echo "Testing account creation..."
          ACCOUNT_RESPONSE=$(curl -s -X POST http://localhost/api/v1/accounts \
            -H "Content-Type: application/json" \
            -d '{"owner_name": "CI Test User", "initial_balance": 1000.00}' \
            --connect-timeout 10 --max-time 30)
          
          echo "Account creation response: $ACCOUNT_RESPONSE"
          
          # Extract account ID (handle different response formats)
          ACCOUNT_ID=$(echo $ACCOUNT_RESPONSE | jq -r '.account.id // .id // empty')
          if [ -z "$ACCOUNT_ID" ] || [ "$ACCOUNT_ID" = "null" ]; then
            echo "❌ Failed to extract account ID from response"
            echo "Response: $ACCOUNT_RESPONSE"
            exit 1
          fi
          echo "Created account ID: $ACCOUNT_ID"
          
          # Test account retrieval
          echo "Testing account retrieval..."
          curl -f "http://localhost/api/v1/accounts/$ACCOUNT_ID" --connect-timeout 10 --max-time 30 || exit 1
          
          # Test transaction processing
          echo "Testing transaction processing..."
          curl -s -X POST "http://localhost/api/v1/accounts/$ACCOUNT_ID/transactions" \
            -H "Content-Type: application/json" \
            -d '{"type": "deposit", "amount": 500.00, "description": "CI test deposit"}' \
            --connect-timeout 10 --max-time 30 || exit 1
          
          # Test transaction history
          echo "Testing transaction history..."
          curl -f "http://localhost/api/v1/accounts/$ACCOUNT_ID/transactions" --connect-timeout 10 --max-time 30 || exit 1

      - name: Test Swagger documentation
        run: |
          # Test if Swagger UI is accessible
          echo "Testing Swagger UI..."
          curl -f http://localhost:8081 --connect-timeout 10 --max-time 30 || exit 1

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Container Status ==="
          docker-compose ps
          echo ""
          echo "=== API Gateway Logs ==="
          docker-compose logs api-gateway
          echo ""
          echo "=== Banking API Logs ==="
          docker-compose logs banking-api
          echo ""
          echo "=== Database Logs ==="
          docker-compose logs postgres mongodb rabbitmq
          echo ""
          echo "=== All Services Logs ==="
          docker-compose logs

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Performance tests (optional, runs only on main branch)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup services
        run: |
          docker-compose up -d
          timeout 300 bash -c 'until docker-compose ps | grep -q "healthy.*healthy.*healthy"; do sleep 10; done'
          sleep 30

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          # Create a simple k6 performance test
          cat << 'EOF' > perf-test.js
          import http from 'k6/http';
          import { check } from 'k6';

          export let options = {
            vus: 10,
            duration: '30s',
          };

          export default function() {
            // Test account creation
            let accountPayload = JSON.stringify({
              owner_name: 'Perf Test User',
              initial_balance: 1000.00
            });
            
            let accountResponse = http.post('http://localhost/api/v1/accounts', accountPayload, {
              headers: { 'Content-Type': 'application/json' },
            });
            
            check(accountResponse, {
              'account created': (r) => r.status === 201,
            });

            // Test health check
            let healthResponse = http.get('http://localhost/health');
            check(healthResponse, {
              'health check passes': (r) => r.status === 200,
            });
          }
          EOF

          k6 run perf-test.js

      - name: Cleanup performance tests
        if: always()
        run: docker-compose down -v

  # Deployment readiness check
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests]
    if: always() && (needs.e2e-tests.result == 'success')
    steps:
      - name: Deployment readiness check
        run: |
          echo "🚀 Banking Ledger Service is ready for deployment!"
          echo "✅ All tests passed"
          echo "✅ Docker images built successfully"
          echo "✅ Security scans completed"
          echo "✅ End-to-end tests verified"
          
          if [[ "${{ needs.performance-tests.result }}" == "success" ]]; then
            echo "✅ Performance tests passed"
          fi
