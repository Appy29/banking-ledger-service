# gateway/nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream banking_api {
        server banking-api:8080;
        # Add more instances here if you scale:
        # server banking-api-2:8080;
        # server banking-api-3:8080;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Basic security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server {
        listen 80;
        server_name localhost;

        # Health check endpoint (bypass rate limiting)
        location /health {
            proxy_pass http://banking_api/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Readiness check
        location /ready {
            proxy_pass http://banking_api/ready;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Swagger YAML file with CORS headers - ADD THIS BEFORE OTHER LOCATIONS
        location /swagger.yml {
            proxy_pass http://banking_api/swagger.yml;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # CORS headers for Swagger UI
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept";
            
            # Handle OPTIONS preflight requests
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, OPTIONS";
                add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept";
                return 204;
            }
        }

        # API routes with rate limiting
        location /api/ {
            # Apply rate limiting
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;

            # Request size limits
            client_max_body_size 1M;

            # Proxy to banking service
            proxy_pass http://banking_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Add request ID for tracing
            proxy_set_header X-Request-ID $request_id;
        }

        # Transaction endpoints - stricter rate limiting
        location /api/v1/accounts {
            limit_req zone=auth burst=10 nodelay;
            limit_req_status 429;

            client_max_body_size 1M;

            proxy_pass http://banking_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;

            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Root redirect - MOVED TO THE END
        location / {
            return 301 /api/v1/;
        }

        # Custom error pages
        error_page 429 @rate_limit;
        location @rate_limit {
            return 429 '{"error":"Rate limit exceeded","retry_after":60}';
            add_header Content-Type application/json;
        }

        error_page 502 503 504 @backend_error;
        location @backend_error {
            return 503 '{"error":"Service temporarily unavailable"}';
            add_header Content-Type application/json;
        }
    }
}