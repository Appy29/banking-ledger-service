// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_interfaces.go
//

// Package mock_services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"

	models "github.com/appy29/banking-ledger-service/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountStorage is a mock of AccountStorage interface.
type MockAccountStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStorageMockRecorder
	isgomock struct{}
}

// MockAccountStorageMockRecorder is the mock recorder for MockAccountStorage.
type MockAccountStorageMockRecorder struct {
	mock *MockAccountStorage
}

// NewMockAccountStorage creates a new mock instance.
func NewMockAccountStorage(ctrl *gomock.Controller) *MockAccountStorage {
	mock := &MockAccountStorage{ctrl: ctrl}
	mock.recorder = &MockAccountStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountStorage) EXPECT() *MockAccountStorageMockRecorder {
	return m.recorder
}

// AtomicBalanceUpdate mocks base method.
func (m *MockAccountStorage) AtomicBalanceUpdate(ctx context.Context, accountID, transactionType string, amount float64) (float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AtomicBalanceUpdate", ctx, accountID, transactionType, amount)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AtomicBalanceUpdate indicates an expected call of AtomicBalanceUpdate.
func (mr *MockAccountStorageMockRecorder) AtomicBalanceUpdate(ctx, accountID, transactionType, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AtomicBalanceUpdate", reflect.TypeOf((*MockAccountStorage)(nil).AtomicBalanceUpdate), ctx, accountID, transactionType, amount)
}

// CreateAccount mocks base method.
func (m *MockAccountStorage) CreateAccount(ctx context.Context, account *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountStorageMockRecorder) CreateAccount(ctx, account any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountStorage)(nil).CreateAccount), ctx, account)
}

// GetAccountByID mocks base method.
func (m *MockAccountStorage) GetAccountByID(ctx context.Context, accountID string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, accountID)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockAccountStorageMockRecorder) GetAccountByID(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountStorage)(nil).GetAccountByID), ctx, accountID)
}

// UpdateBalance mocks base method.
func (m *MockAccountStorage) UpdateBalance(ctx context.Context, accountID string, newBalance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, accountID, newBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockAccountStorageMockRecorder) UpdateBalance(ctx, accountID, newBalance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockAccountStorage)(nil).UpdateBalance), ctx, accountID, newBalance)
}

// MockTransactionStorage is a mock of TransactionStorage interface.
type MockTransactionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStorageMockRecorder
	isgomock struct{}
}

// MockTransactionStorageMockRecorder is the mock recorder for MockTransactionStorage.
type MockTransactionStorageMockRecorder struct {
	mock *MockTransactionStorage
}

// NewMockTransactionStorage creates a new mock instance.
func NewMockTransactionStorage(ctrl *gomock.Controller) *MockTransactionStorage {
	mock := &MockTransactionStorage{ctrl: ctrl}
	mock.recorder = &MockTransactionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionStorage) EXPECT() *MockTransactionStorageMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionStorage) CreateTransaction(ctx context.Context, transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionStorageMockRecorder) CreateTransaction(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionStorage)(nil).CreateTransaction), ctx, transaction)
}

// GetTransactionByID mocks base method.
func (m *MockTransactionStorage) GetTransactionByID(ctx context.Context, transactionID string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ctx, transactionID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionStorageMockRecorder) GetTransactionByID(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionStorage)(nil).GetTransactionByID), ctx, transactionID)
}

// GetTransactionsByAccountID mocks base method.
func (m *MockTransactionStorage) GetTransactionsByAccountID(ctx context.Context, accountID string, page, limit int) ([]models.Transaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByAccountID", ctx, accountID, page, limit)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactionsByAccountID indicates an expected call of GetTransactionsByAccountID.
func (mr *MockTransactionStorageMockRecorder) GetTransactionsByAccountID(ctx, accountID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByAccountID", reflect.TypeOf((*MockTransactionStorage)(nil).GetTransactionsByAccountID), ctx, accountID, page, limit)
}

// UpdateTransaction mocks base method.
func (m *MockTransactionStorage) UpdateTransaction(ctx context.Context, transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransaction indicates an expected call of UpdateTransaction.
func (mr *MockTransactionStorageMockRecorder) UpdateTransaction(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransaction", reflect.TypeOf((*MockTransactionStorage)(nil).UpdateTransaction), ctx, transaction)
}

// UpdateTransactionStatus mocks base method.
func (m *MockTransactionStorage) UpdateTransactionStatus(ctx context.Context, transactionID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", ctx, transactionID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockTransactionStorageMockRecorder) UpdateTransactionStatus(ctx, transactionID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockTransactionStorage)(nil).UpdateTransactionStatus), ctx, transactionID, status)
}

// UpdateTransactionStatusWithError mocks base method.
func (m *MockTransactionStorage) UpdateTransactionStatusWithError(ctx context.Context, transactionID, status, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatusWithError", ctx, transactionID, status, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatusWithError indicates an expected call of UpdateTransactionStatusWithError.
func (mr *MockTransactionStorageMockRecorder) UpdateTransactionStatusWithError(ctx, transactionID, status, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatusWithError", reflect.TypeOf((*MockTransactionStorage)(nil).UpdateTransactionStatusWithError), ctx, transactionID, status, errorMessage)
}

// MockAccountServiceInterface is a mock of AccountServiceInterface interface.
type MockAccountServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockAccountServiceInterfaceMockRecorder is the mock recorder for MockAccountServiceInterface.
type MockAccountServiceInterfaceMockRecorder struct {
	mock *MockAccountServiceInterface
}

// NewMockAccountServiceInterface creates a new mock instance.
func NewMockAccountServiceInterface(ctrl *gomock.Controller) *MockAccountServiceInterface {
	mock := &MockAccountServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAccountServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountServiceInterface) EXPECT() *MockAccountServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountServiceInterface) CreateAccount(ctx context.Context, req *models.CreateAccountRequest) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, req)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountServiceInterfaceMockRecorder) CreateAccount(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountServiceInterface)(nil).CreateAccount), ctx, req)
}

// GetAccountBalance mocks base method.
func (m *MockAccountServiceInterface) GetAccountBalance(ctx context.Context, accountID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalance", ctx, accountID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalance indicates an expected call of GetAccountBalance.
func (mr *MockAccountServiceInterfaceMockRecorder) GetAccountBalance(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalance", reflect.TypeOf((*MockAccountServiceInterface)(nil).GetAccountBalance), ctx, accountID)
}

// GetAccountByID mocks base method.
func (m *MockAccountServiceInterface) GetAccountByID(ctx context.Context, accountID string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, accountID)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockAccountServiceInterfaceMockRecorder) GetAccountByID(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountServiceInterface)(nil).GetAccountByID), ctx, accountID)
}

// MockTransactionServiceInterface is a mock of TransactionServiceInterface interface.
type MockTransactionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockTransactionServiceInterfaceMockRecorder is the mock recorder for MockTransactionServiceInterface.
type MockTransactionServiceInterfaceMockRecorder struct {
	mock *MockTransactionServiceInterface
}

// NewMockTransactionServiceInterface creates a new mock instance.
func NewMockTransactionServiceInterface(ctrl *gomock.Controller) *MockTransactionServiceInterface {
	mock := &MockTransactionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionServiceInterface) EXPECT() *MockTransactionServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateInitialTransaction mocks base method.
func (m *MockTransactionServiceInterface) CreateInitialTransaction(ctx context.Context, accountID string, initialBalance float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitialTransaction", ctx, accountID, initialBalance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInitialTransaction indicates an expected call of CreateInitialTransaction.
func (mr *MockTransactionServiceInterfaceMockRecorder) CreateInitialTransaction(ctx, accountID, initialBalance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitialTransaction", reflect.TypeOf((*MockTransactionServiceInterface)(nil).CreateInitialTransaction), ctx, accountID, initialBalance)
}

// CreatePendingTransaction mocks base method.
func (m *MockTransactionServiceInterface) CreatePendingTransaction(ctx context.Context, transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePendingTransaction", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePendingTransaction indicates an expected call of CreatePendingTransaction.
func (mr *MockTransactionServiceInterfaceMockRecorder) CreatePendingTransaction(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePendingTransaction", reflect.TypeOf((*MockTransactionServiceInterface)(nil).CreatePendingTransaction), ctx, transaction)
}

// GetAccountByID mocks base method.
func (m *MockTransactionServiceInterface) GetAccountByID(ctx context.Context, accountID string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", ctx, accountID)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockTransactionServiceInterfaceMockRecorder) GetAccountByID(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockTransactionServiceInterface)(nil).GetAccountByID), ctx, accountID)
}

// GetTransactionByID mocks base method.
func (m *MockTransactionServiceInterface) GetTransactionByID(ctx context.Context, transactionID string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", ctx, transactionID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockTransactionServiceInterfaceMockRecorder) GetTransactionByID(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockTransactionServiceInterface)(nil).GetTransactionByID), ctx, transactionID)
}

// GetTransactionHistory mocks base method.
func (m *MockTransactionServiceInterface) GetTransactionHistory(ctx context.Context, accountID string, page, limit int) ([]models.Transaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionHistory", ctx, accountID, page, limit)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactionHistory indicates an expected call of GetTransactionHistory.
func (mr *MockTransactionServiceInterfaceMockRecorder) GetTransactionHistory(ctx, accountID, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionHistory", reflect.TypeOf((*MockTransactionServiceInterface)(nil).GetTransactionHistory), ctx, accountID, page, limit)
}

// ProcessTransaction mocks base method.
func (m *MockTransactionServiceInterface) ProcessTransaction(ctx context.Context, accountID string, req *models.TransactionRequest) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransaction", ctx, accountID, req)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTransaction indicates an expected call of ProcessTransaction.
func (mr *MockTransactionServiceInterfaceMockRecorder) ProcessTransaction(ctx, accountID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransaction", reflect.TypeOf((*MockTransactionServiceInterface)(nil).ProcessTransaction), ctx, accountID, req)
}

// ProcessTransactionAsync mocks base method.
func (m *MockTransactionServiceInterface) ProcessTransactionAsync(ctx context.Context, transactionID string, req *models.TransactionRequest) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransactionAsync", ctx, transactionID, req)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTransactionAsync indicates an expected call of ProcessTransactionAsync.
func (mr *MockTransactionServiceInterfaceMockRecorder) ProcessTransactionAsync(ctx, transactionID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransactionAsync", reflect.TypeOf((*MockTransactionServiceInterface)(nil).ProcessTransactionAsync), ctx, transactionID, req)
}

// UpdateTransactionStatus mocks base method.
func (m *MockTransactionServiceInterface) UpdateTransactionStatus(ctx context.Context, transactionID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatus", ctx, transactionID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatus indicates an expected call of UpdateTransactionStatus.
func (mr *MockTransactionServiceInterfaceMockRecorder) UpdateTransactionStatus(ctx, transactionID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatus", reflect.TypeOf((*MockTransactionServiceInterface)(nil).UpdateTransactionStatus), ctx, transactionID, status)
}

// UpdateTransactionStatusWithError mocks base method.
func (m *MockTransactionServiceInterface) UpdateTransactionStatusWithError(ctx context.Context, transactionID, status, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionStatusWithError", ctx, transactionID, status, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransactionStatusWithError indicates an expected call of UpdateTransactionStatusWithError.
func (mr *MockTransactionServiceInterfaceMockRecorder) UpdateTransactionStatusWithError(ctx, transactionID, status, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionStatusWithError", reflect.TypeOf((*MockTransactionServiceInterface)(nil).UpdateTransactionStatusWithError), ctx, transactionID, status, errorMessage)
}
